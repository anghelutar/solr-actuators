plugins {
    id 'java'
    id 'idea'
}
dependencies {
    testImplementation group: 'io.rest-assured', name: 'rest-assured', version: '3.0.1'
    testImplementation group: 'io.rest-assured', name: 'json-path', version: '3.0.1'
    testImplementation group: 'io.rest-assured', name: 'rest-assured-common', version: '3.0.1'
    testImplementation "org.junit.jupiter:junit-jupiter-engine:5.4.2"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.4.2"
    testRuntimeOnly group: 'org.glassfish.jaxb', name: 'jaxb-runtime', version: '2.3.2'
}
test {
    enabled = false
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}
subprojects {
    apply plugin: 'java'
    apply plugin: 'eu.xenit.docker'
    apply plugin: 'eu.xenit.docker-compose.auto'
    apply from: "${project.projectDir}/overload.gradle"

    description = "Solr ${flavor} with Actuators"

    configurations {
        actuatorsJar
    }


    dependencies {
        actuatorsJar project(path: ":solr-actuators", configuration: "sharedJar")
    }

    task integrationTest(type: Test, group: "verification") {
        useJUnitPlatform()
        testClassesDirs = project.parent.sourceSets.test.output.classesDirs
        classpath = project.parent.sourceSets.test.runtimeClasspath
        outputs.upToDateWhen { false }
    }


    createDockerFile {
        from "${solrBaseImage}"

        dependsOn(configurations.actuatorsJar)

        if (flavor == "solr6") {
            smartCopy "${project.parent.projectDir}/src/test/resources/solr6/solrconfig_insight.xml", "/opt/alfresco-search-services/solrhome/templates/rerank/conf/solrconfig_insight.xml"
            smartCopy configurations.actuatorsJar.singleFile, "/opt/alfresco-search-services/solrhome/lib/"
        }
    }

    dockerCompose {
        isRequiredBy(integrationTest)
        environment.put 'ALFRESCO_IMAGE', project.alfrescoimage
        useComposeFiles = [
                "${project.parent.projectDir}/src/test/resources/compose/docker-compose.yml"
        ]
    }
}